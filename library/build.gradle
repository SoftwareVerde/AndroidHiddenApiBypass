apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

group 'com.softwareverde.androidhidddenapibypass'
version '2.0'

android {
    compileSdk 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdk 1
        targetSdk 30
        versionCode 2
        versionName "2.0"
        consumerProguardFiles "consumer-rules.pro"
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/**'
            excludes += '/*.properties'
        }
    }

//    testOptions {
//        devices {
//            api30(ManagedVirtualDevice) {
//                device = "Pixel 2"
//                apiLevel = 30
//                abi = "x86_64"
//            }
//            api29(ManagedVirtualDevice) {
//                device = "Pixel 2"
//                apiLevel = 29
//                abi = "x86_64"
//            }
//            api28(ManagedVirtualDevice) {
//                device = "Pixel 2"
//                apiLevel = 28
//                abi = "x86_64"
//            }
//        }
//        deviceGroups {
//            phones {
//                targetDevices.addAll(devices)
//            }
//        }
//        emulatorSnapshots {
//            enableForTestFailures false
//            maxSnapshotsForTestFailures 0
//        }
//    }
}

dependencies {
    compileOnly project(":stub")
    compileOnly 'androidx.annotation:annotation:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestCompileOnly project(":stub")
}

afterEvaluate {
    android.libraryVariants.collect { variant ->
        task("generate${variant.name.capitalize()}SourcesJar", type: Jar) {
            from variant.javaCompileProvider.get().source
            exclude '**/BuildConfig.java'
            classifier 'sources'
        }
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
                options.addStringOption "-release", "8"
            }
            source variant.javaCompileProvider.get().source
            exclude '**/BuildConfig.java'
            classpath += variant.javaCompileProvider.get().classpath
            classpath += files(android.getBootClasspath())
            classpath += tasks.getByName("generate${variant.name.capitalize()}BuildConfig").getOutputs().files
            options {
                failOnError false
                encoding 'UTF-8'
                links 'https://docs.oracle.com/javase/8/docs/api/'
                links 'https://developer.android.com/reference/androidx/'
            }
        }
        task("generate${variant.name.capitalize()}JavadocJar", type: Jar) {
            dependsOn "generate${variant.name.capitalize()}Javadoc"
            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
            classifier 'javadoc'
        }
    }
}
